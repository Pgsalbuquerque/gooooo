// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: grpc/billing_service.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChangePlanClient is the client API for ChangePlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangePlanClient interface {
	RequestBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Status, error)
}

type changePlanClient struct {
	cc grpc.ClientConnInterface
}

func NewChangePlanClient(cc grpc.ClientConnInterface) ChangePlanClient {
	return &changePlanClient{cc}
}

func (c *changePlanClient) RequestBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ChangePlan/RequestBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangePlanServer is the server API for ChangePlan service.
// All implementations must embed UnimplementedChangePlanServer
// for forward compatibility
type ChangePlanServer interface {
	RequestBilling(context.Context, *Billing) (*Status, error)
	mustEmbedUnimplementedChangePlanServer()
}

// UnimplementedChangePlanServer must be embedded to have forward compatible implementations.
type UnimplementedChangePlanServer struct {
}

func (UnimplementedChangePlanServer) RequestBilling(context.Context, *Billing) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBilling not implemented")
}
func (UnimplementedChangePlanServer) mustEmbedUnimplementedChangePlanServer() {}

// UnsafeChangePlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangePlanServer will
// result in compilation errors.
type UnsafeChangePlanServer interface {
	mustEmbedUnimplementedChangePlanServer()
}

func RegisterChangePlanServer(s grpc.ServiceRegistrar, srv ChangePlanServer) {
	s.RegisterService(&ChangePlan_ServiceDesc, srv)
}

func _ChangePlan_RequestBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangePlanServer).RequestBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChangePlan/RequestBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangePlanServer).RequestBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangePlan_ServiceDesc is the grpc.ServiceDesc for ChangePlan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangePlan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChangePlan",
	HandlerType: (*ChangePlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestBilling",
			Handler:    _ChangePlan_RequestBilling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/billing_service.proto",
}
